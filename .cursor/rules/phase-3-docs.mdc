---
description: 
globs: core/analysis/phase_3.py,core/utils/tools/agent_parser.py,core/utils/tools/file_retriever.py,tests/phase_3_test/run_test.py
alwaysApply: false
---
Phase 3 (Deep Analysis) is the third stage in the project analysis pipeline. Here's how it works:

1. **Purpose:** 
   Phase 3 performs deep, detailed analysis of the project's codebase based on the agent assignments created in Phase 2. Each specialized agent analyzes specific files according to its expertise.

2. **Key Components:**
   - **Dynamic Agent Creation:** Creates specialized analysis agents based on Phase 2's output
   - **File Content Retrieval:** Retrieves and formats the actual contents of assigned files
   - **In-depth Analysis:** Each agent analyzes its assigned files in detail
   - **Concurrent Execution:** Runs all agent analyses in parallel using asyncio

3. **Technical Flow:**
   1. Phase3Analysis reads the agent definitions from Phase 2's output
   2. It creates AnthropicArchitect instances for each agent using `get_architect_for_phase`
   3. For each agent, it:
      - Retrieves the contents of all files assigned to that agent
      - Creates a custom prompt that includes the tree structure, assigned files, and file contents
      - Formats a context object with all the necessary information
   4. It runs all agents concurrently using asyncio.gather
   5. It collects and processes the results from each agent

4. **Agent Parser Integration:**
   - Uses the `agent_parser.py` module to extract agent definitions from Phase 2's XML output
   - The parser handles both well-formed XML and provides fallback extraction using regex
   - It extracts agent names, descriptions, and file assignments to build the appropriate contexts

5. **File Retriever Integration:**
   - Uses `file_retriever.py` to read the actual file contents
   - Formats the content with file paths for context
   - Handles different encodings and exclusion patterns
   - Filters to only include files assigned to each specific agent

6. **Fallback Mechanism:**
   - If no valid agent definitions can be extracted from Phase 2, it uses a set of predefined fallback agents:
     - Code Analysis Agent
     - Dependency Mapping Agent
     - Architecture Agent

7. **Model Configuration:**
   Like previous phases, the model used is configurable in `agents.py`. By default, it uses Claude 3.7 Sonnet.

8. **Output Format:**
   The output is a structured dictionary containing:
   ```json
   {
     "phase": "Deep Analysis",
     "findings": [
       {
         "agent": "Agent Name",
         "findings": "Detailed analysis of assigned files..."
       },
       // More agent findings
     ]
   }
   ```

Phase 3 is critical because it provides the in-depth analysis of the code itself, going beyond the structural and dependency analysis of earlier phases to examine implementation details, patterns, and architectural decisions.

## Fallback Mechanism

Phase 3 uses both formats, but in different ways:

1. **Input from Phase 2:** 
   - It expects a dictionary (JSON-like structure) as the input from Phase 2, specifically the `analysis_plan` parameter in the `run` method
   - This dictionary should contain an `agents` field with the agent definitions

2. **XML Processing:**
   - The `agent_parser.py` module can parse XML-formatted text that's contained within the Phase 2 output
   - If the Phase 2 output contains an XML string in the `plan` field, the `parse_agents_from_phase2` function will extract agent definitions from it
   - It first tries to parse it as proper XML using ElementTree
   - If XML parsing fails, it falls back to regex-based extraction

So the answer is that Phase 3 primarily expects a JSON/dictionary structure as input, but it's designed to handle XML strings contained within that JSON structure. This flexibility allows it to work with different output formats from Phase 2.

Looking at the code:
```python
# In Phase3Analysis.run()
agent_definitions = analysis_plan.get("agents", [])
```

This shows that it expects a dictionary input with an "agents" field. However, if that's missing, it has fallback mechanisms to parse XML from the text output of Phase 2.

