You are an intelligent senioor developer and AI code generator.
- **Anthropic DEVELOPMENT**: You are required to use the brand new latest model: **'claude-3-7-sonnet-20250219'**!!
* !!!NEVER use 'claude-3-5-sonnet', 'claude-3-sonnet-20240229' or 'claude-3-haiku-20240307' or 'claude-3-opus-20240229'!!!
* **OpenAI DEVELOPMENT**: You are required to use the brand new latest model: **'o1', 'o3-mini', and 'gpt-4o' **!!
* !!!NEVER use'gpt-4' or 'gpt-4-turbo' or 'gpt-4-turbo-preview', 'gpt-3.5'!!!

# CursorRules Architect Documentation

CursorRules Architect is a multi-agent codebase analysis tool that leverages advanced AI models from Anthropic and OpenAI to analyze project structures, dependencies, and architectural patterns. The tool performs a comprehensive analysis through a structured pipeline of phases, each designed to extract specific insights from the target codebase.

The primary purpose is to generate detailed reports on project architecture, identify patterns, document relationships between components, and provide improvement recommendations. The system also creates and manages `.cursorrules` and `.cursorignore` files to define project standards and exclusion rules.

## Project Architecture

CursorRules Architect follows a modular architecture with clear separation of concerns:

```
cursorrules-architect
├── config/              # Configuration settings and prompts
├── core/                # Core application logic
│   ├── agents/          # AI agent implementations
│   ├── analysis/        # Analysis phase implementations
│   └── interfaces/      # Type definitions and models
├── utils/               # Utility functions and tools
├── main.py              # Main application entry point
└── requirements.txt     # Project dependencies
```

The project adopts a multi-phase analysis approach where each phase builds on the insights from previous phases, culminating in a comprehensive analysis report.

## Core Components

### Analysis Pipeline

The analysis workflow consists of six distinct phases, each with specific responsibilities:

1. **Initial Discovery (Phase 1)** - Uses Claude agents to perform initial exploration of the project structure, dependencies, and technology stack.
   
2. **Methodical Planning (Phase 2)** - Uses OpenAI's o1 model to create a detailed analysis plan based on Phase 1 findings.
   
3. **Deep Analysis (Phase 3)** - Uses Claude agents for in-depth analysis of code patterns, dependencies, and architectural decisions.
   
4. **Synthesis (Phase 4)** - Uses OpenAI's o1 model to synthesize findings from Phase 3 and provide deeper insights.
   
5. **Consolidation (Phase 5)** - Uses Claude to consolidate results from all previous phases into a comprehensive report.
   
6. **Final Analysis** - Uses OpenAI's o1 model to provide architectural patterns, system structure mapping, and improvement recommendations.

### Agent System

The tool utilizes two primary agent types to interact with AI models:

1. **ClaudeAgent** - Interfaces with Anthropic's Claude models (specifically `claude-3-7-sonnet-20250219`) for phases 1, 3, and 5.

2. **OpenAIAgent** - Interfaces with OpenAI's o1 model for phases 2, 4, and the final analysis.

Each agent is initialized with specific roles, responsibilities, and prompt templates tailored to their analysis tasks.

### Prompt Management

The system uses centralized prompt templates for each analysis phase, stored in the `config/prompts` directory. This separation allows for easy maintenance and modification of prompts without changing the core logic.

## Module Documentation

### Config Package

The `config` package contains configuration settings and prompt templates for the analysis phases.

#### config/prompts

This directory houses prompt templates for each analysis phase:

- **phase_1_prompts.py**: Templates for the Initial Discovery agents (Structure Agent, Dependency Agent, Tech Stack Agent)
- **phase_2_prompts.py**: Templates for the Methodical Planning phase
- **phase_3_prompts.py**: Templates for the Deep Analysis agents (Code Analysis Agent, Dependency Mapping Agent, Architecture Agent, Documentation Agent)
- **phase_4_prompts.py**: Templates for the Synthesis phase
- **phase_5_prompts.py**: Templates for the Consolidation phase
- **final_analysis_prompt.py**: Templates for the Final Analysis

Example prompt structure from `phase_1_prompts.py`:

```python
PHASE_1_BASE_PROMPT = """You are the {agent_name}, responsible for {agent_role}.

Your specific responsibilities are:
{agent_responsibilities}

Analyze this project context and provide a detailed report focused on your domain:

{context}

Format your response as a structured report with clear sections and findings."""

# Specific prompts for each agent in Phase 1
STRUCTURE_AGENT_PROMPT = {
    "name": "Structure Agent",
    "role": "analyzing directory and file organization",
    "responsibilities": [
        "Analyze directory and file organization",
        "Map project layout and file relationships",
        "Identify key architectural components"
    ]
}
```

#### config/exclusions.py

Defines sets of directories, files, and file extensions to exclude from analysis:

```python
EXCLUDED_DIRS = {
    'node_modules', '.next', '.git', 'venv', '__pycache__', '_pycache_',
    'dist', 'build', '.vscode', '.idea', 'coverage',
    '.pytest_cache', '.mypy_cache', 'env', '.env', '.venv',
    'site-packages'
}

EXCLUDED_FILES = {
    'package-lock.json', 'yarn.lock', 'pnpm-lock.yaml',
    '.DS_Store', '.env', '.env.local', '.gitignore',
    'README.md', 'LICENSE', '.eslintrc', '.prettierrc',
    'tsconfig.json', 'requirements.txt', 'poetry.lock',
    'Pipfile.lock', '.gitattributes', '.gitconfig', '.gitmodules',
}

EXCLUDED_EXTENSIONS = {
    '.jpg', '.jpeg', '.png', '.gif', '.ico',
    '.svg', '.mp4', '.mp3', '.pdf', '.zip',
    '.woff', '.woff2', '.ttf', '.eot',
    '.pyc', '.pyo', '.pyd', '.so', '.pkl', '.pickle',
    '.db', '.sqlite', '.log', '.cache'
}
```

### Core Package

The `core` package contains the main functionality of the project analyzer.

#### core/agents

This module provides agent classes for interacting with different AI models:

- **base/base_agents.py & base_tools.py**: Base classes for agents and tools
- **anthropic.py**: Implements the `ClaudeAgent` class for interacting with Anthropic's Claude models
- **openai.py**: Implements the `OpenAIAgent` class for interacting with OpenAI models

Example from `anthropic.py`:

```python
class ClaudeAgent:
    """
    Agent class for interacting with Anthropic's Claude models.
    
    This class provides a structured way to create specialized agents that use
    Claude models for different analysis tasks.
    """
    
    def __init__(self, name: str, role: str, responsibilities: List[str], prompt_template: str = None):
        """
        Initialize a Claude agent with a specific name, role, and responsibilities.
        
        Args:
            name: The name of the agent (e.g., "Structure Agent")
            role: The role of the agent (e.g., "analyzing directory and file organization")
            responsibilities: A list of specific tasks the agent is responsible for
            prompt_template: Optional custom prompt template to use instead of the default
        """
        self.name = name
        self.role = role
        self.responsibilities = responsibilities
        self.prompt_template = prompt_template or self._get_default_prompt_template()
```

#### core/analysis

Contains modules for different phases of the project analysis:

- **phase_1.py**: Initial Discovery phase implementation
- **phase_2.py**: Methodical Planning phase implementation
- **phase_3.py**: Deep Analysis phase implementation
- **phase_4.py**: Synthesis phase implementation
- **phase_5.py**: Consolidation phase implementation
- **final_analysis.py**: Final Analysis phase implementation

Each phase has a dedicated class that encapsulates its logic. For example, from `phase_1.py`:

```python
class Phase1Analysis:
    """
    Class responsible for Phase 1 (Initial Discovery) of the project analysis.
    
    This phase uses Claude agents to perform initial exploration of the project,
    analyzing directory structure, dependencies, and technology stack.
    """
    
    def __init__(self):
        """Initialize the Phase 1 analysis with the required agents."""
        # Phase 1: Initial Discovery Agents
        self.agents = [
            ClaudeAgent(
                name=STRUCTURE_AGENT_PROMPT["name"],
                role=STRUCTURE_AGENT_PROMPT["role"],
                responsibilities=STRUCTURE_AGENT_PROMPT["responsibilities"],
                prompt_template=PHASE_1_BASE_PROMPT
            ),
            # Other agents...
        ]
    
    async def run(self, tree: List[str], package_info: Dict) -> Dict:
        """
        Run the Initial Discovery Phase using Claude-3.7-Sonnet agents.
        """
        context = {
            "tree_structure": tree,
            "package_info": package_info
        }
        agent_tasks = [agent.analyze(context) for agent in self.agents]
        results = await asyncio.gather(*agent_tasks)
        return {
            "phase": "Initial Discovery",
            "findings": results
        }
```

#### core/interfaces

This directory contains model definitions and type definitions for agents, phases, and tools.

### Utils Package

The `utils` package contains utility functions and tools for the project analyzer.

#### utils/file_creation

Contains utilities for creating and managing specific files:

- **cursorignore.py**: Manages `.cursorignore` files that define patterns to exclude from analysis
- **cursorrules.py**: Manages `.cursorrules` files that define project standards
- **phases_output.py**: Handles saving the outputs of analysis phases to files

Example from `phases_output.py`:

```python
def save_phase_outputs(directory: Path, analysis_data: dict) -> None:
    """Save each phase's output to separate markdown files."""
    output_dir = directory / "phases_output"
    output_dir.mkdir(parents=True, exist_ok=True)

    # Save the results of each phase to a separate Markdown file
    with open(output_dir / "phase1_discovery.md", "w", encoding="utf-8") as f:
        f.write("# Phase 1: Initial Discovery (Claude-3.7-Sonnet)\n\n")
        f.write("## Agent Findings\n\n")
        f.write("```json\n")
        f.write(json.dumps(analysis_data["phase1"], indent=2))
        f.write("\n```\n")
    
    # Similar code for other phases...
```

#### utils/tools

Contains tools for the project analyzer:

- **tree_generator.py**: Enhanced tree generation functionality for visualizing directory structures

This tool provides advanced directory visualization with file type icons and customizable exclusion rules:

```python
def get_project_tree(directory: Path, max_depth: int = 4) -> List[str]:
    """
    Generate a tree structure for a project directory.
    This is the main function to be used from other modules.
    """
    # Generate the tree
    tree = generate_tree(
        directory, 
        max_depth=max_depth,
        exclude_dirs=DEFAULT_EXCLUDE_DIRS,
        exclude_patterns=DEFAULT_EXCLUDE_PATTERNS
    )
    
    # Add the key
    key = generate_key(tree)
    
    # Return the complete tree with key
    if key:
        return key + tree
    return tree
```

## Main Application Flow

The main entry point is `main.py`, which implements the command-line interface using the `click` library and orchestrates the analysis process:

1. Parse command-line arguments for project path and output file
2. Initialize the `ProjectAnalyzer` class with the project directory
3. Execute the analysis phases sequentially:
   - Generate project tree
   - Run Phase 1: Initial Discovery
   - Run Phase 2: Methodical Planning
   - Run Phase 3: Deep Analysis
   - Run Phase 4: Synthesis
   - Run Phase 5: Consolidation
   - Run Final Analysis
4. Save the analysis results to files:
   - Complete analysis to the main output file
   - Individual phase outputs to separate files in a `phases_output` directory

Key code from `main.py`:

```python
class ProjectAnalyzer:
    def __init__(self, directory: Path):
        self.directory = directory
        # Initialize result storage
        self.phase1_results = {}
        self.phase2_results = {}
        self.phase3_results = {}
        self.phase4_results = {}
        self.consolidated_report = {}
        self.final_analysis = {}
        
        # Initialize all phase analyzers
        self.phase1_analyzer = Phase1Analysis()
        self.phase2_analyzer = Phase2Analysis(model="o1")
        self.phase3_analyzer = Phase3Analysis()
        self.phase4_analyzer = Phase4Analysis(model="o1")
        self.phase5_analyzer = Phase5Analysis(model="claude-3-7-sonnet-20250219")
        self.final_analyzer = FinalAnalysis(model="o1")

    async def analyze(self) -> str:
        """Run complete analysis workflow"""
        start_time = time.time()
        
        with Progress(...) as progress:
            # Run each phase sequentially
            task1 = progress.add_task("[green]Phase 1: Initial Discovery...", total=None)
            tree = get_project_tree(self.directory)
            package_info = {}
            self.phase1_results = await self.run_phase1(tree, package_info)
            progress.update(task1, completed=True)
            
            # Other phases follow a similar pattern...
        
        # Format and return the final output
        analysis = [
            f"Project Analysis Report for: {self.directory}",
            "=" * 50 + "\n",
            # Content from each phase...
        ]
        
        return "\n".join(analysis)
```

## Dependencies

The project has the following external dependencies:

```
anthropic>=0.18.1    # For interacting with Anthropic's Claude models
typer[all]>=0.9.0    # For command-line interface
rich>=13.7.0         # For enhanced terminal output
pathlib>=1.0.1       # For path manipulation
```

## Usage Instructions

To use CursorRules Architect:

1. Ensure you have valid API keys for OpenAI and Anthropic with access to the required models
2. Set your API keys as environment variables:
   ```bash
   export OPENAI_API_KEY='your-openai-api-key'
   export ANTHROPIC_API_KEY='your-anthropic-api-key'
   ```
3. Run the analysis on a project:
   ```bash
   python main.py --path /path/to/your/project --output output_file.txt
   ```

Arguments:
- `--path` or `-p`: Path to the project directory to analyze
- `--output` or `-o`: Optional output file path (defaults to projectname_analysis.txt)

## Contributing Guidelines

Detailed contribution guidelines are available in the `CONTRIBUTING.md` file. Key points:

1. **Development Setup**:
   - Python 3.8 or higher required
   - API keys for OpenAI and Anthropic required
   - Install dependencies with `pip install -r requirements.txt`

2. **Code Standards**:
   - Follow PEP 8 guidelines
   - Use type hints
   - Include docstrings for functions, classes, and modules

3. **Git Workflow**:
   - Fork the repository
   - Create a feature branch
   - Submit a pull request

4. **Pull Request Guidelines**:
   - Ensure code passes tests
   - Provide a clear description of changes
   - Address any merge conflicts

For more details, refer to the full `CONTRIBUTING.md` file in the repository.

---

<tree_structure>
.
├── .DS_Store
├── .cursor
│   ├── rules
│   │   ├── claude-3-7-sonnet-reasoning.mdc
├── .cursorignore
├── .cursorrules
├── .env
├── CONTRIBUTING.md
├── README.md
├── config
│   ├── __init__.py
│   ├── agents.py
│   ├── exclusions.py
│   ├── prompts
│   │   ├── __init__.py
│   │   ├── final_analysis_prompt.py
│   │   ├── phase_1_prompts.py
│   │   ├── phase_2_prompts.py
│   │   ├── phase_4_prompts.py
│   │   ├── phase_5_prompts.py
├── core
│   ├── __init__.py
│   ├── agents
│   │   ├── .DS_Store
│   │   ├── __init__.py
│   │   ├── anthropic.py
│   │   ├── base.py
│   │   ├── openai.py
│   ├── analysis
│   │   ├── __init__.py
│   │   ├── final_analysis.py
│   │   ├── phase_1.py
│   │   ├── phase_2.py
│   │   ├── phase_3.py
│   │   ├── phase_4.py
│   │   ├── phase_5.py
│   │   ├── phases_output
│   │   │   ├── complete_report.md
│   │   │   ├── final_analysis.md
│   │   │   ├── phase1_discovery.md
│   │   │   ├── phase2_planning.md
│   │   │   ├── phase3_analysis.md
│   │   │   ├── phase4_synthesis.md
│   │   │   ├── phase5_consolidation.md
│   ├── types
│   │   ├── __init__.py
│   │   ├── agent_config.py
├── main.py
├── requirements.txt
├── tests
│   ├── final_analysis
│   ├── phase_1
│   ├── phase_2
│   │   ├── output
│   │   ├── parser.py
│   │   ├── run_phase2.py
│   │   ├── test_doc.md
│   ├── phase_3
│   │   ├── input
│   │   │   ├── phase2_parsed_20250307_143503.json
│   │   ├── output
│   │   ├── run_phase3.py
│   ├── phase_4
│   ├── phase_5
│   ├── utils
│   │   ├── run_tree_generator.py
├── utils
│   ├── .DS_Store
│   ├── file_creation
│   │   ├── cursorignore.py
│   │   ├── phases_output.py
│   ├── tools
│   │   ├── agent_parser.py
│   │   ├── file_retriever.py
│   │   ├── tree_generator.py
</tree_structure>